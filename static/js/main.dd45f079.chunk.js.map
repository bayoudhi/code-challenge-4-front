{"version":3,"sources":["components/AddTodo.tsx","components/Layout.tsx","components/TodoListItem.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddTodo","onAdd","useState","title","setTitle","Paper","style","margin","padding","Grid","container","xs","md","item","paddingRight","TextField","fullWidth","color","placeholder","value","onChange","e","target","onKeyPress","key","Button","variant","disabled","onClick","Layout","memo","props","elevation","backgroundColor","AppBar","position","height","Toolbar","Typography","children","TodoListItem","id","divider","completed","onComplete","onUncomplete","onDelete","ListItem","Checkbox","checked","disableRipple","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","TodoList","items","length","List","overflow","map","todo","index","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd45f079.chunk.js","sourcesContent":["import React, { FunctionComponent, useState } from \"react\";\nimport { Button, Grid, Paper, TextField } from \"@material-ui/core\";\n\nexport interface AddTodoProps {\n  onAdd: (title: string) => void;\n}\n\nexport const AddTodo: FunctionComponent<AddTodoProps> = ({ onAdd }) => {\n  const [title, setTitle] = useState(\"\");\n\n  return (\n    <Paper style={{ margin: 16, padding: 16 }}>\n      <Grid container>\n        <Grid xs={10} md={11} item style={{ paddingRight: 16 }}>\n          <TextField\n            fullWidth\n            color=\"primary\"\n            placeholder=\"Add new todo\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            onKeyPress={(e) => {\n              if (title && e.key === \"Enter\") {\n                onAdd(title);\n                setTitle(\"\");\n              }\n            }}\n          />\n        </Grid>\n        <Grid xs={2} md={1} item>\n          <Button\n            fullWidth\n            color=\"primary\"\n            variant=\"contained\"\n            disabled={title === \"\"}\n            onClick={() => {\n              onAdd(title);\n              setTitle(\"\");\n            }}\n          >\n            Add\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n","import React, { memo } from \"react\";\nimport { AppBar, Toolbar, Typography, Paper } from \"@material-ui/core\";\nexport const Layout = memo((props) => (\n  <Paper\n    elevation={0}\n    style={{ padding: 0, margin: 0, backgroundColor: \"#fafafa\" }}\n  >\n    <AppBar color=\"primary\" position=\"static\" style={{ height: 64 }}>\n      <Toolbar style={{ height: 64 }}>\n        <Typography color=\"inherit\">TODOS</Typography>\n      </Toolbar>\n    </AppBar>\n    {props.children}\n  </Paper>\n));\n","import React, { FunctionComponent } from \"react\";\nimport {\n  ListItem,\n  Checkbox,\n  IconButton,\n  ListItemText,\n  ListItemSecondaryAction,\n} from \"@material-ui/core\";\nimport DeleteOutlined from \"@material-ui/icons/DeleteOutlined\";\n\nexport interface TodoListItemProps {\n  id: string;\n  title: string;\n  completed: boolean;\n  divider: boolean;\n  onComplete?: (id: string) => void;\n  onUncomplete?: (id: string) => void;\n  onDelete?: (title: string) => void;\n}\n\nexport const TodoListItem: FunctionComponent<TodoListItemProps> = ({\n  id,\n  divider,\n  title,\n  completed,\n  onComplete,\n  onUncomplete,\n  onDelete,\n}) => {\n  return (\n    <ListItem divider={divider}>\n      <Checkbox\n        checked={completed}\n        disableRipple\n        onClick={() => {\n          if (completed) {\n            if (onUncomplete) onUncomplete(id);\n          } else {\n            if (onComplete) onComplete(id);\n          }\n        }}\n      />\n      <ListItemText primary={title} />\n      <ListItemSecondaryAction>\n        <IconButton\n          aria-label=\"Delete Todo\"\n          onClick={() => {\n            if (onDelete) onDelete(id);\n          }}\n        >\n          <DeleteOutlined />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { List, Paper } from \"@material-ui/core\";\nimport { TodoListItem } from \"./TodoListItem\";\n\nexport interface TodoListProps {\n  items: {\n    id: string;\n    title: string;\n    completed: boolean;\n  }[];\n  onComplete?: (id: string) => void;\n  onUncomplete?: (id: string) => void;\n  onDelete?: (title: string) => void;\n}\n\nexport const TodoList: FunctionComponent<TodoListProps> = ({\n  items,\n  onComplete,\n  onUncomplete,\n  onDelete,\n}) => {\n  return (\n    <>\n      {items.length > 0 && (\n        <Paper style={{ margin: 16 }}>\n          <List style={{ overflow: \"scroll\" }}>\n            {items.map((todo, index) => (\n              <TodoListItem\n                {...todo}\n                onComplete={onComplete}\n                onUncomplete={onUncomplete}\n                onDelete={onDelete}\n                key={todo.id}\n                divider={index !== items.length - 1}\n              />\n            ))}\n          </List>\n        </Paper>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\n\nimport \"./App.css\";\nimport { AddTodo } from \"./components/AddTodo\";\n\nimport { Layout } from \"./components/Layout\";\nimport { TodoList } from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <Layout>\n      <AddTodo onAdd={(title) => console.log(\"onAdd\", title)}></AddTodo>\n      <TodoList\n        onComplete={(id) => console.log(\"onComplete \", id)}\n        onUncomplete={(id) => console.log(\"onUncomplete \", id)}\n        onDelete={(id) => console.log(\"onDelete \", id)}\n        items={[\n          {\n            id: \"id1\",\n            title: \"Go to school\",\n            completed: false,\n          },\n          {\n            id: \"id3\",\n            title: \"Buy milk\",\n            completed: true,\n          },\n          {\n            id: \"id2\",\n            title: \"Buy PS5\",\n            completed: false,\n          },\n        ]}\n      ></TodoList>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}