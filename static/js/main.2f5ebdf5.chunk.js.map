{"version":3,"sources":["components/AddTodo.tsx","components/Layout.tsx","components/TodoListItem.tsx","components/TodoList.tsx","App.tsx","graphql/queries.ts","graphql/mutations.ts","reportWebVitals.ts","index.tsx"],"names":["AddTodo","onAdd","useState","title","setTitle","Paper","style","margin","padding","Grid","container","xs","md","item","paddingRight","TextField","fullWidth","color","placeholder","value","onChange","e","target","onKeyPress","key","Button","variant","disabled","onClick","Layout","memo","props","elevation","backgroundColor","AppBar","position","height","Toolbar","Typography","children","TodoListItem","todo","divider","onComplete","onUncomplete","onDelete","ListItem","Checkbox","checked","completed","disableRipple","id","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","TodoList","items","length","List","overflow","map","index","Amplify","configure","JSON","parse","process","App","todos","setTodos","useEffect","API","graphql","graphqlOperation","then","result","data","getTodos","Items","catch","error","console","addTodo","a","response","createTodo","deleteTodo","filter","updateTodo","find","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f5ebdf5.chunk.js","sourcesContent":["import React, { FunctionComponent, useState } from \"react\";\nimport { Button, Grid, Paper, TextField } from \"@material-ui/core\";\n\nexport interface AddTodoProps {\n  onAdd: (title: string) => void;\n}\n\nexport const AddTodo: FunctionComponent<AddTodoProps> = ({ onAdd }) => {\n  const [title, setTitle] = useState(\"\");\n\n  return (\n    <Paper style={{ margin: 16, padding: 16 }}>\n      <Grid container>\n        <Grid xs={10} md={11} item style={{ paddingRight: 16 }}>\n          <TextField\n            fullWidth\n            color=\"primary\"\n            placeholder=\"Add new todo\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            onKeyPress={(e) => {\n              if (title && e.key === \"Enter\") {\n                onAdd(title);\n                setTitle(\"\");\n              }\n            }}\n          />\n        </Grid>\n        <Grid xs={2} md={1} item>\n          <Button\n            fullWidth\n            color=\"primary\"\n            variant=\"contained\"\n            disabled={title === \"\"}\n            onClick={() => {\n              onAdd(title);\n              setTitle(\"\");\n            }}\n          >\n            Add\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n","import React, { memo } from \"react\";\nimport { AppBar, Toolbar, Typography, Paper } from \"@material-ui/core\";\nexport const Layout = memo((props) => (\n  <Paper\n    elevation={0}\n    style={{ padding: 0, margin: 0, backgroundColor: \"#fafafa\" }}\n  >\n    <AppBar color=\"primary\" position=\"static\" style={{ height: 64 }}>\n      <Toolbar style={{ height: 64 }}>\n        <Typography color=\"inherit\">TODOS</Typography>\n      </Toolbar>\n    </AppBar>\n    {props.children}\n  </Paper>\n));\n","import React, { FunctionComponent } from \"react\";\nimport {\n  ListItem,\n  Checkbox,\n  IconButton,\n  ListItemText,\n  ListItemSecondaryAction,\n} from \"@material-ui/core\";\nimport DeleteOutlined from \"@material-ui/icons/DeleteOutlined\";\nimport { Todo } from \"../API\";\n\nexport interface TodoListItemProps {\n  todo: Todo;\n  divider: boolean;\n  onComplete?: (id: string) => void;\n  onUncomplete?: (id: string) => void;\n  onDelete?: (title: string) => void;\n}\n\nexport const TodoListItem: FunctionComponent<TodoListItemProps> = ({\n  todo,\n  divider,\n  onComplete,\n  onUncomplete,\n  onDelete,\n}) => {\n  return (\n    <ListItem divider={divider}>\n      <Checkbox\n        checked={todo.completed}\n        disableRipple\n        onClick={() => {\n          if (todo.id) {\n            if (todo.completed) {\n              if (onUncomplete) onUncomplete(todo.id);\n            } else {\n              if (onComplete) onComplete(todo.id);\n            }\n          }\n        }}\n      />\n      <ListItemText primary={todo.title} />\n      <ListItemSecondaryAction>\n        <IconButton\n          aria-label=\"Delete Todo\"\n          onClick={() => {\n            if (onDelete && todo.id) onDelete(todo.id);\n          }}\n        >\n          <DeleteOutlined />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { List, Paper } from \"@material-ui/core\";\nimport { TodoListItem } from \"./TodoListItem\";\nimport { Todo } from \"../API\";\n\nexport interface TodoListProps {\n  items: Todo[];\n  onComplete?: (id: string) => void;\n  onUncomplete?: (id: string) => void;\n  onDelete?: (title: string) => void;\n}\n\nexport const TodoList: FunctionComponent<TodoListProps> = ({\n  items,\n  onComplete,\n  onUncomplete,\n  onDelete,\n}) => {\n  return (\n    <>\n      {items.length > 0 && (\n        <Paper style={{ margin: 16 }}>\n          <List style={{ overflow: \"scroll\" }}>\n            {items.map((todo, index) => (\n              <TodoListItem\n                todo={todo}\n                onComplete={onComplete}\n                onUncomplete={onUncomplete}\n                onDelete={onDelete}\n                key={todo.id}\n                divider={index !== items.length - 1}\n              />\n            ))}\n          </List>\n        </Paper>\n      )}\n    </>\n  );\n};\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\n\nimport \"./App.css\";\nimport { AddTodo } from \"./components/AddTodo\";\nimport { Layout } from \"./components/Layout\";\nimport { TodoList } from \"./components/TodoList\";\n\nimport Amplify, { API, graphqlOperation } from \"aws-amplify\";\nimport { GraphQLResult } from \"@aws-amplify/api-graphql\";\n\nimport * as queries from \"./graphql/queries\";\nimport * as mutations from \"./graphql/mutations\";\n// import * as subscriptions from \"./graphql/subscriptions\";\nimport {\n  CreateTodoMutation,\n  DeleteTodoMutation,\n  GetTodosQuery,\n  Todo,\n  UpdateTodoMutation,\n  UpdateTodoMutationVariables,\n} from \"./API\";\n\nAmplify.configure(JSON.parse(process.env.REACT_APP_AWS_EXPORTS || \"\"));\n\nconst App: FunctionComponent<{}> = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    // Anything in here is fired on component mount.\n    (API.graphql(graphqlOperation(queries.getTodos)) as Promise<\n      GraphQLResult<GetTodosQuery>\n    >)\n      .then((result) => {\n        setTodos(result.data?.getTodos?.Items || []);\n      })\n      .catch((error) => console.error(error));\n    return () => {\n      // Anything in here is fired on component unmount.\n      // console.log(\"B\");\n    };\n  }, []);\n\n  const addTodo = async (title: string) => {\n    const response = await (API.graphql(\n      graphqlOperation(mutations.createTodo, {\n        title,\n      })\n    ) as GraphQLResult<CreateTodoMutation>);\n\n    setTodos([...todos, response.data?.createTodo as Todo]);\n  };\n\n  const deleteTodo = async (id: string) => {\n    const response = await (API.graphql(\n      graphqlOperation(mutations.deleteTodo, {\n        id,\n      })\n    ) as GraphQLResult<DeleteTodoMutation>);\n    setTodos(todos.filter((todo) => todo.id !== response.data?.deleteTodo?.id));\n  };\n\n  const updateTodo = async (id: string) => {\n    const todo = todos.find((item) => item.id === id);\n    const response = await (API.graphql(\n      graphqlOperation(mutations.updateTodo, {\n        id,\n        todo: {\n          completed: !todo?.completed,\n          title: todo?.title,\n        },\n      } as UpdateTodoMutationVariables)\n    ) as GraphQLResult<UpdateTodoMutation>);\n    setTodos(\n      todos.map((item) => {\n        if (item.id === id) {\n          return response.data?.updateTodo as Todo;\n        } else {\n          return item;\n        }\n      })\n    );\n  };\n\n  return (\n    <Layout>\n      <AddTodo onAdd={addTodo}></AddTodo>\n      <TodoList\n        onComplete={updateTodo}\n        onUncomplete={updateTodo}\n        onDelete={deleteTodo}\n        items={todos}\n      ></TodoList>\n    </Layout>\n  );\n};\n\nexport default App;\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getTodo = /* GraphQL */ `\n  query GetTodo($id: ID!) {\n    getTodo(id: $id) {\n      id\n      title\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const getTodos = /* GraphQL */ `\n  query GetTodos($limit: Int, $token: String) {\n    getTodos(limit: $limit, token: $token) {\n      Items {\n        id\n        title\n        completed\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createTodo = /* GraphQL */ `\n  mutation CreateTodo($title: String!) {\n    createTodo(title: $title) {\n      id\n      title\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateTodo = /* GraphQL */ `\n  mutation UpdateTodo($id: ID!, $todo: UpdateTodoInput!) {\n    updateTodo(id: $id, todo: $todo) {\n      id\n      title\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteTodo = /* GraphQL */ `\n  mutation DeleteTodo($id: ID!) {\n    deleteTodo(id: $id) {\n      id\n      title\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}